// spread/spread.js
// ‚úÖ Timestamp-–ª–æ–≥–∏–∫–∞ –±–µ–∑ —Ñ–∞–∑ "bitget ‚Üí gate"
// –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ç–µ–∫—É—â–∏–º–∏ exchanges/*.js

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã–Ω–µ—Å–∏ –≤ .env / config)
const CHECK_INTERVAL_MS = 5000;   // –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥—ã
const MAX_SKEW_MS       = 1000;   // –º–∞–∫—Å. —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
const MAX_AGE_MS        = 5000;   // –º–∞–∫—Å. "–≤–æ–∑—Ä–∞—Å—Ç" –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (—á—Ç–æ–±—ã –Ω–µ —Å—á–∏—Ç–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
const ALERT_SPREAD_PCT  = 0.05;   // –ø–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.05% = 0.05)

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const TARGET_PAIRS = new Set();
const prices = {
    BITGET: Object.create(null), // symbol -> { price, ts }
    GATE:   Object.create(null),
};

let checkerHandle = null;

export function trackSymbols(symbols = []) {
    TARGET_PAIRS.clear();
    for (const s of symbols) TARGET_PAIRS.add(s);

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (checkerHandle) clearInterval(checkerHandle);
    console.log(`[SPREAD] ‚ñ∂ Tracking: ${[...TARGET_PAIRS].join(', ')}`);
    checkerHandle = setInterval(runCheck, CHECK_INTERVAL_MS);
}

export function updatePrice(source, symbol, price) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä—ã, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
    if (!TARGET_PAIRS.has(symbol)) return;
    const p = Number(price);
    if (!Number.isFinite(p)) return;

    const now = Date.now();
    prices[source] ??= Object.create(null);
    prices[source][symbol] = { price: p, ts: now };
    // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞:
    // console.log(`[${source}] ${symbol} @ ${p} (${new Date(now).toISOString()})`);
}

function runCheck() {
    const now = Date.now();
    console.log(`\n[SPREAD] üîç Checking (${new Date(now).toISOString()})`);

    for (const symbol of TARGET_PAIRS) {
        const b = prices.BITGET[symbol];
        const g = prices.GATE[symbol];

        if (!b || !g) {
            // –ù–µ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ü–µ–Ω—É
            // console.log(`‚ÑπÔ∏è ${symbol}: –∂–¥—ë–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É`);
            continue;
        }

        const ageB = now - b.ts;
        const ageG = now - g.ts;
        const skew = Math.abs(b.ts - g.ts);

        // –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –∏–ª–∏ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        if (ageB > MAX_AGE_MS || ageG > MAX_AGE_MS) {
            // console.log(`‚ö†Ô∏è ${symbol}: —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ (B:${ageB}ms, G:${ageG}ms)`);
            continue;
        }
        if (skew > MAX_SKEW_MS) {
            // console.log(`‚ö†Ô∏è ${symbol}: —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ${skew}ms`);
            continue;
        }

        const spreadPct = pctSpread(b.price, g.price);
        if (spreadPct >= ALERT_SPREAD_PCT) {
            console.log(
                `üö® ${symbol}: Bitget ${b.price} | Gate.io ${g.price} | ` +
                `Spread: ${spreadPct.toFixed(3)}% | skew ${skew}ms`
            );
        } else {
            // –°–∫—Ä—ã—Ç—ã–π "–∑–µ–ª—ë–Ω—ã–π" –ª–æ–≥ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏:
            // console.log(`‚úÖ ${symbol}: ${spreadPct.toFixed(3)}% (skew ${skew}ms)`);
        }
    }
}

function pctSpread(p1, p2) {
    // –ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ / —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ * 100
    const mid = (p1 + p2) / 2;
    if (mid === 0) return 0;
    return Math.abs(p1 - p2) / mid * 100;
}
